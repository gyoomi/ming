package ${package}import com.taoding.ipr.base.dao.BaseDAO;
import com.taoding.ipr.base.model.PageVO;
import com.taoding.ipr.base.model.UserSession;
import com.taoding.ipr.util.CommonUtils;
import com.taoding.ipr.util.UpdateUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

.service.impl;
    ${package}
        .dao.${bigCamelCaseClassName}Repository;
    ${package}
        .entity.${bigCamelCaseClassName}Entity; ${package}.service.${bigCamelCaseClassName}Service;


/**
 * ${tableComment} ServiceImpl
 *
 * @author ${author}
 * @version ${datetime}
 */
@Service
public class ${bigCamelCaseClassName}ServiceImpl extends BaseDAO implements ${bigCamelCaseClassName}Service {

    @Autowired
    private ${bigCamelCaseClassName}Repository ${littleCamelCaseClassName}Repository;

    /**
     * 查询${tableComment}信息
     *
     * @param ${primary.littleCamelCaseFieldName} ${tableComment}Id
     * @return ${tableComment}
     */
    @Override
    public ${bigCamelCaseClassName}Entity findById(${primary.fieldType} ${primary.littleCamelCaseFieldName}) {
        return ${littleCamelCaseClassName}Repository.findById(${primary.littleCamelCaseFieldName}).orElse(null);
    }

    /**
     * 查询${tableComment}列表
     *
     * @param ${littleCamelCaseClassName} ${tableComment}
     * @return ${tableComment}List
     */
    @Override
    public List<${bigCamelCaseClassName}Entity> findByList() {
        return ${littleCamelCaseClassName}Repository.findAll();
    }

    /**
     * 保存${tableComment}
     *
     * @param ${littleCamelCaseClassName} ${tableComment}
     * @return ${tableComment}
     */
     @Override
     public ${bigCamelCaseClassName}Entity save(${bigCamelCaseClassName}Entity ${littleCamelCaseClassName}) {
         setBaseProperties(${littleCamelCaseClassName});
         return ${littleCamelCaseClassName}Repository.save(${littleCamelCaseClassName});
     }

    /**
     * 通用设置
     *
     * @param ${littleCamelCaseClassName}
     */
     private void setBaseProperties(${bigCamelCaseClassName}Entity ${littleCamelCaseClassName}) {
         ${littleCamelCaseClassName}.setId(CommonUtils.getUUID());
         ${littleCamelCaseClassName}.setCreateTime(CommonUtils.getStringDate(new Date()));
         ${littleCamelCaseClassName}.setStatus(1);
         ${littleCamelCaseClassName}.setCorpId(UserSession.getUserSession().getCorpId());
         ${littleCamelCaseClassName}.setOperator(UserSession.getUserSession().getUsername());
     }

    /**
     * 更新${tableComment}
     *
     * @param ${littleCamelCaseClassName} ${tableComment}
     * @return ${tableComment}
     */
     @Override
     public ${bigCamelCaseClassName}Entity update(${bigCamelCaseClassName}Entity ${littleCamelCaseClassName}) {
         if (StringUtils.isNotBlank(${littleCamelCaseClassName}.getId())) {
             ${bigCamelCaseClassName}Entity source${bigCamelCaseClassName} = ${littleCamelCaseClassName}Repository.findById(${littleCamelCaseClassName}.getId()).orElse(null);
             UpdateUtils.copyNonNullProperties(source${bigCamelCaseClassName}, ${littleCamelCaseClassName});
         }
         return ${littleCamelCaseClassName}Repository.saveAndFlush(${littleCamelCaseClassName});
     }

    /**
     * 带条件分页查询${tableComment}列表
     *
     * @param params  ${tableComment}
     * @return PageVO
     */
    @Override
    public PageVO<${bigCamelCaseClassName}Entity> findByPage(Map<String, String> params) {
        int pageNo = null == params.get("pageNo") ? 1 : Integer.parseInt(params.get("pageNo"));
        int pageSize = null == params.get("pageSize") ? 15 : Integer.parseInt(params.get("pageSize"));
        List<Object> args = new ArrayList<>();
        String sql = " SELECT t1.* FROM ${tableName} t1 "
                   + " WHERE 1=1 "
                   + " ORDER BY t1.create_time DESC";
        // TODO
        return getPage(sql, pageNo, pageSize, args, new BeanPropertyRowMapper(${bigCamelCaseClassName}Entity.class));
    }

    /**
     * 删除${tableComment}
     *
     * @param ${primary.littleCamelCaseFieldName}
     * @return
     */
    @Override
    public int deleteById(${primary.fieldType} ${primary.littleCamelCaseFieldName}) {
        ${littleCamelCaseClassName}Repository.deleteById(${primary.littleCamelCaseFieldName});
        return 1;
    }

    /**
     * 批量删除${tableComment}
     *
     * @param ${primary.littleCamelCaseFieldName}s
     * @return
     */
    @Override
    public int deleteByIds(String ${primary.littleCamelCaseFieldName}s) {
        Stream.of(StringUtils.split(${primary.littleCamelCaseFieldName}s, ",")).forEach(${littleCamelCaseClassName}Repository::deleteById);
        return 1;
    }
}